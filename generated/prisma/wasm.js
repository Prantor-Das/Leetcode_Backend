
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  googleId: 'googleId',
  email: 'email',
  username: 'username',
  password: 'password',
  role: 'role',
  image: 'image',
  isVerified: 'isVerified',
  refreshToken: 'refreshToken',
  provider: 'provider',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationCodeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  code: 'code',
  type: 'type',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  userAgent: 'userAgent',
  ipAddress: 'ipAddress',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.ProblemScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  difficulty: 'difficulty',
  tags: 'tags',
  userId: 'userId',
  examples: 'examples',
  constraints: 'constraints',
  hints: 'hints',
  editorial: 'editorial',
  testcases: 'testcases',
  codeSnippets: 'codeSnippets',
  referenceSolutions: 'referenceSolutions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubmissionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  problemId: 'problemId',
  sourceCode: 'sourceCode',
  language: 'language',
  stdin: 'stdin',
  stdout: 'stdout',
  stderr: 'stderr',
  compileOutput: 'compileOutput',
  status: 'status',
  memory: 'memory',
  time: 'time',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TestCaseResultScalarFieldEnum = {
  id: 'id',
  submissionId: 'submissionId',
  testCase: 'testCase',
  passed: 'passed',
  stdout: 'stdout',
  expected: 'expected',
  stderr: 'stderr',
  compileOutput: 'compileOutput',
  status: 'status',
  memory: 'memory',
  time: 'time',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProblemSolvedScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  problemId: 'problemId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlaylistScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  userId: 'userId',
  visibility: 'visibility',
  secretKey: 'secretKey',
  isAdminPlaylist: 'isAdminPlaylist',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProblemInPlaylistScalarFieldEnum = {
  id: 'id',
  playListId: 'playListId',
  problemId: 'problemId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EnrolledPlaylistScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  originalPlaylistId: 'originalPlaylistId',
  name: 'name',
  description: 'description',
  enrolledAt: 'enrolledAt'
};

exports.Prisma.ProblemInEnrolledPlaylistScalarFieldEnum = {
  id: 'id',
  enrolledPlaylistId: 'enrolledPlaylistId',
  problemId: 'problemId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DiscussionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  description: 'description',
  tags: 'tags',
  commentsCount: 'commentsCount',
  upvotes: 'upvotes',
  views: 'views',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  discussId: 'discussId',
  userId: 'userId',
  comment: 'comment',
  upvote: 'upvote',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CommentUpvoteScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  commentId: 'commentId'
};

exports.Prisma.DiscussionUpvoteScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  discussionId: 'discussionId',
  createdAt: 'createdAt'
};

exports.Prisma.ContestScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  startTime: 'startTime',
  endTime: 'endTime',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContestantScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  contestId: 'contestId',
  score: 'score',
  rank: 'rank',
  joinedAt: 'joinedAt'
};

exports.Prisma.ContestProblemScalarFieldEnum = {
  id: 'id',
  contestId: 'contestId',
  problemId: 'problemId',
  points: 'points',
  order: 'order'
};

exports.Prisma.ContestSubmissionScalarFieldEnum = {
  id: 'id',
  contestId: 'contestId',
  userId: 'userId',
  problemId: 'problemId',
  submissionId: 'submissionId',
  score: 'score',
  timeTaken: 'timeTaken',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

exports.Difficulty = exports.$Enums.Difficulty = {
  EASY: 'EASY',
  MEDIUM: 'MEDIUM',
  HARD: 'HARD'
};

exports.Status = exports.$Enums.Status = {
  ACCEPTED: 'ACCEPTED',
  WRONG_ANSWER: 'WRONG_ANSWER'
};

exports.VerificationCodeType = exports.$Enums.VerificationCodeType = {
  EMAIL_VERIFICATION: 'EMAIL_VERIFICATION',
  RESEND_EMAIL_VERIFICATION: 'RESEND_EMAIL_VERIFICATION',
  FORGOT_PASSWORD: 'FORGOT_PASSWORD'
};

exports.PlaylistVisibility = exports.$Enums.PlaylistVisibility = {
  PUBLIC: 'PUBLIC',
  PRIVATE: 'PRIVATE'
};

exports.ContestStatus = exports.$Enums.ContestStatus = {
  LIVE: 'LIVE',
  UPCOMING: 'UPCOMING',
  ENDED: 'ENDED'
};

exports.Prisma.ModelName = {
  User: 'User',
  VerificationCode: 'VerificationCode',
  Session: 'Session',
  Problem: 'Problem',
  Submission: 'Submission',
  TestCaseResult: 'TestCaseResult',
  ProblemSolved: 'ProblemSolved',
  Playlist: 'Playlist',
  ProblemInPlaylist: 'ProblemInPlaylist',
  EnrolledPlaylist: 'EnrolledPlaylist',
  ProblemInEnrolledPlaylist: 'ProblemInEnrolledPlaylist',
  Discussion: 'Discussion',
  Comment: 'Comment',
  CommentUpvote: 'CommentUpvote',
  DiscussionUpvote: 'DiscussionUpvote',
  Contest: 'Contest',
  Contestant: 'Contestant',
  ContestProblem: 'ContestProblem',
  ContestSubmission: 'ContestSubmission'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/prantordas/Desktop/Leetcode_Backend/generated/prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin-arm64",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/Users/prantordas/Desktop/Leetcode_Backend/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../.env"
  },
  "relativePath": "../../prisma",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n  output   = \"../generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nenum UserRole {\n  USER\n  ADMIN\n}\n\nenum Difficulty {\n  EASY\n  MEDIUM\n  HARD\n}\n\nenum Status {\n  ACCEPTED\n  WRONG_ANSWER\n}\n\nenum VerificationCodeType {\n  EMAIL_VERIFICATION\n  RESEND_EMAIL_VERIFICATION\n  FORGOT_PASSWORD\n}\n\nenum PlaylistVisibility {\n  PUBLIC\n  PRIVATE\n}\n\nenum ContestStatus {\n  LIVE\n  UPCOMING\n  ENDED\n}\n\nmodel User {\n  id           String   @id @default(cuid())\n  googleId     String?  @unique\n  email        String   @unique\n  username     String\n  password     String   @default(\"\")\n  role         UserRole @default(USER)\n  image        String?\n  isVerified   Boolean  @default(false)\n  refreshToken String?\n  provider     String   @default(\"local\")\n  createdAt    DateTime @default(now())\n  updatedAt    DateTime @updatedAt\n\n  verificationCode  VerificationCode[]\n  session           Session[]\n  problems          Problem[]\n  submission        Submission[]\n  problemSolved     ProblemSolved[]\n  playlists         Playlist[]\n  enrolledPlaylists EnrolledPlaylist[]\n  Discussion        Discussion[]\n  Comment           Comment[]\n  DiscussionUpvote  DiscussionUpvote[]\n  Contestant        Contestant[]\n  ContestSubmission ContestSubmission[]\n  CommentUpvote     CommentUpvote[]\n}\n\nmodel VerificationCode {\n  id        String               @id @default(uuid())\n  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId    String\n  code      String\n  type      VerificationCodeType\n  expiresAt DateTime\n  createdAt DateTime             @default(now())\n  updatedAt DateTime             @updatedAt\n\n  @@unique([userId, code])\n  @@index([userId])\n  @@map(\"verification_codes\")\n}\n\nmodel Session {\n  id        String   @id @default(uuid())\n  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  userId    String\n  userAgent String?\n  ipAddress String?  @db.VarChar(45)\n  expiresAt DateTime\n  createdAt DateTime @default(now())\n\n  @@index([userId])\n  @@map(\"sessions\")\n}\n\nmodel Problem {\n  id          String     @id @default(uuid())\n  title       String\n  description String\n  difficulty  Difficulty\n  tags        String[] // [\"tag1\", \"tag2\", \"tag3\"]\n  userId      String\n  examples    Json\n  constraints String\n  hints       String?\n  editorial   String?\n\n  testcases          Json\n  codeSnippets       Json\n  referenceSolutions Json\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  //  Relationship\n  user                      User                        @relation(fields: [userId], references: [id], onDelete: Cascade)\n  submission                Submission[]\n  solvedBy                  ProblemSolved[]\n  problemInPlaylist         ProblemInPlaylist[]\n  problemInEnrolledPlaylist ProblemInEnrolledPlaylist[]\n  ContestProblem            ContestProblem[]\n  ContestSubmission         ContestSubmission[]\n}\n\nmodel Submission {\n  id            String  @id @default(uuid())\n  userId        String\n  problemId     String\n  sourceCode    Json\n  language      String\n  stdin         String?\n  stdout        String?\n  stderr        String?\n  compileOutput String?\n  status        Status\n  memory        String?\n  time          String?\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)\n  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)\n\n  testCases         TestCaseResult[]\n  ContestSubmission ContestSubmission?\n}\n\nmodel TestCaseResult {\n  id            String  @id @default(uuid())\n  submissionId  String\n  testCase      Int\n  passed        Boolean\n  stdout        String?\n  expected      String\n  stderr        String?\n  compileOutput String?\n  status        Status\n  memory        String?\n  time          String?\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  //  Relationship\n  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)\n\n  @@index([submissionId])\n}\n\nmodel ProblemSolved {\n  id        String @id @default(uuid())\n  userId    String\n  problemId String\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  //Relationship\n  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)\n  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)\n\n  @@unique([userId, problemId])\n}\n\n// Admin created playlists (public/private)\nmodel Playlist {\n  id              String             @id @default(uuid())\n  name            String\n  description     String?\n  userId          String\n  visibility      PlaylistVisibility @default(PUBLIC)\n  secretKey       String? // Only for private playlists\n  isAdminPlaylist Boolean            @default(false) // true if created by admin\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  problems          ProblemInPlaylist[]\n  enrolledPlaylists EnrolledPlaylist[]\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([name, userId])\n}\n\nmodel ProblemInPlaylist {\n  id         String   @id @default(uuid())\n  playListId String\n  problemId  String\n  createdAt  DateTime @default(now())\n  updatedAt  DateTime @updatedAt\n\n  playlist Playlist @relation(fields: [playListId], references: [id], onDelete: Cascade)\n  problem  Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)\n\n  @@unique([playListId, problemId])\n}\n\n// User enrolled playlists (cloned from admin playlists)\nmodel EnrolledPlaylist {\n  id                 String   @id @default(uuid())\n  userId             String\n  originalPlaylistId String // Reference to the original admin playlist\n  name               String\n  description        String?\n  enrolledAt         DateTime @default(now())\n\n  user             User                        @relation(fields: [userId], references: [id], onDelete: Cascade)\n  originalPlaylist Playlist                    @relation(fields: [originalPlaylistId], references: [id], onDelete: Cascade)\n  problems         ProblemInEnrolledPlaylist[]\n\n  @@unique([userId, originalPlaylistId])\n}\n\nmodel ProblemInEnrolledPlaylist {\n  id                 String   @id @default(uuid())\n  enrolledPlaylistId String\n  problemId          String\n  createdAt          DateTime @default(now())\n  updatedAt          DateTime @updatedAt\n\n  enrolledPlaylist EnrolledPlaylist @relation(fields: [enrolledPlaylistId], references: [id], onDelete: Cascade)\n  problem          Problem          @relation(fields: [problemId], references: [id], onDelete: Cascade)\n\n  @@unique([enrolledPlaylistId, problemId])\n}\n\nmodel Discussion {\n  id            String   @id @default(uuid())\n  userId        String\n  title         String\n  description   String\n  tags          String[] @default([])\n  commentsCount Int      @default(0)\n  upvotes       Int?     @default(0)\n  views         Int?     @default(0)\n  createdAt     DateTime @default(now())\n  updatedAt     DateTime @updatedAt\n\n  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)\n  comments         Comment[]\n  DiscussionUpvote DiscussionUpvote[]\n\n  @@unique([userId, title])\n}\n\nmodel Comment {\n  id        String   @id @default(uuid())\n  discussId String\n  userId    String\n  comment   String\n  upvote    Int?     @default(0)\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  discuss       Discussion      @relation(fields: [discussId], references: [id], onDelete: Cascade)\n  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)\n  CommentUpvote CommentUpvote[]\n}\n\nmodel CommentUpvote {\n  id        String  @id @default(uuid())\n  user      User    @relation(fields: [userId], references: [id])\n  userId    String\n  comment   Comment @relation(fields: [commentId], references: [id])\n  commentId String\n\n  @@unique([userId, commentId])\n}\n\nmodel DiscussionUpvote {\n  id           String   @id @default(uuid())\n  userId       String\n  discussionId String\n  createdAt    DateTime @default(now())\n\n  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)\n  discussion Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)\n\n  @@unique([userId, discussionId])\n}\n\nmodel Contest {\n  id          String        @id @default(uuid())\n  title       String\n  description String?\n  startTime   DateTime\n  endTime     DateTime\n  status      ContestStatus @default(UPCOMING)\n  createdAt   DateTime      @default(now())\n  updatedAt   DateTime      @updatedAt\n\n  problems          ContestProblem[]\n  contestants       Contestant[]\n  ContestSubmission ContestSubmission[]\n\n  @@unique([title])\n}\n\nmodel Contestant {\n  id        String   @id @default(uuid())\n  userId    String\n  contestId String\n  score     Int      @default(0)\n  rank      Int?\n  joinedAt  DateTime @default(now())\n\n  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)\n  contest Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)\n\n  @@unique([userId, contestId])\n}\n\nmodel ContestProblem {\n  id        String @id @default(uuid())\n  contestId String\n  problemId String\n  points    Int    @default(100)\n  order     Int    @default(0)\n\n  contest Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)\n  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)\n\n  @@unique([contestId, problemId])\n}\n\nmodel ContestSubmission {\n  id           String   @id @default(uuid())\n  contestId    String\n  userId       String\n  problemId    String\n  submissionId String   @unique\n  score        Int?\n  timeTaken    Int?\n  createdAt    DateTime @default(now())\n  updatedAt    DateTime @updatedAt\n\n  contest    Contest    @relation(fields: [contestId], references: [id], onDelete: Cascade)\n  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)\n  problem    Problem    @relation(fields: [problemId], references: [id], onDelete: Cascade)\n  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)\n\n  @@unique([userId, contestId, problemId]) // To prevent multiple scoring entries\n}\n",
  "inlineSchemaHash": "bdf6c9458f8f1f67d448a7d8fe6d857da53de9e75054de402d695f69e69e9656",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"googleId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"UserRole\"},{\"name\":\"image\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"refreshToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"provider\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"verificationCode\",\"kind\":\"object\",\"type\":\"VerificationCode\",\"relationName\":\"UserToVerificationCode\"},{\"name\":\"session\",\"kind\":\"object\",\"type\":\"Session\",\"relationName\":\"SessionToUser\"},{\"name\":\"problems\",\"kind\":\"object\",\"type\":\"Problem\",\"relationName\":\"ProblemToUser\"},{\"name\":\"submission\",\"kind\":\"object\",\"type\":\"Submission\",\"relationName\":\"SubmissionToUser\"},{\"name\":\"problemSolved\",\"kind\":\"object\",\"type\":\"ProblemSolved\",\"relationName\":\"ProblemSolvedToUser\"},{\"name\":\"playlists\",\"kind\":\"object\",\"type\":\"Playlist\",\"relationName\":\"PlaylistToUser\"},{\"name\":\"enrolledPlaylists\",\"kind\":\"object\",\"type\":\"EnrolledPlaylist\",\"relationName\":\"EnrolledPlaylistToUser\"},{\"name\":\"Discussion\",\"kind\":\"object\",\"type\":\"Discussion\",\"relationName\":\"DiscussionToUser\"},{\"name\":\"Comment\",\"kind\":\"object\",\"type\":\"Comment\",\"relationName\":\"CommentToUser\"},{\"name\":\"DiscussionUpvote\",\"kind\":\"object\",\"type\":\"DiscussionUpvote\",\"relationName\":\"DiscussionUpvoteToUser\"},{\"name\":\"Contestant\",\"kind\":\"object\",\"type\":\"Contestant\",\"relationName\":\"ContestantToUser\"},{\"name\":\"ContestSubmission\",\"kind\":\"object\",\"type\":\"ContestSubmission\",\"relationName\":\"ContestSubmissionToUser\"},{\"name\":\"CommentUpvote\",\"kind\":\"object\",\"type\":\"CommentUpvote\",\"relationName\":\"CommentUpvoteToUser\"}],\"dbName\":null},\"VerificationCode\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToVerificationCode\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"code\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"VerificationCodeType\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"verification_codes\"},\"Session\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SessionToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userAgent\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ipAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"sessions\"},\"Problem\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"difficulty\",\"kind\":\"enum\",\"type\":\"Difficulty\"},{\"name\":\"tags\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"examples\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"constraints\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"hints\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"editorial\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"testcases\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"codeSnippets\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"referenceSolutions\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ProblemToUser\"},{\"name\":\"submission\",\"kind\":\"object\",\"type\":\"Submission\",\"relationName\":\"ProblemToSubmission\"},{\"name\":\"solvedBy\",\"kind\":\"object\",\"type\":\"ProblemSolved\",\"relationName\":\"ProblemToProblemSolved\"},{\"name\":\"problemInPlaylist\",\"kind\":\"object\",\"type\":\"ProblemInPlaylist\",\"relationName\":\"ProblemToProblemInPlaylist\"},{\"name\":\"problemInEnrolledPlaylist\",\"kind\":\"object\",\"type\":\"ProblemInEnrolledPlaylist\",\"relationName\":\"ProblemToProblemInEnrolledPlaylist\"},{\"name\":\"ContestProblem\",\"kind\":\"object\",\"type\":\"ContestProblem\",\"relationName\":\"ContestProblemToProblem\"},{\"name\":\"ContestSubmission\",\"kind\":\"object\",\"type\":\"ContestSubmission\",\"relationName\":\"ContestSubmissionToProblem\"}],\"dbName\":null},\"Submission\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"problemId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sourceCode\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"language\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"stdin\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"stdout\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"stderr\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"compileOutput\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"Status\"},{\"name\":\"memory\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"time\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SubmissionToUser\"},{\"name\":\"problem\",\"kind\":\"object\",\"type\":\"Problem\",\"relationName\":\"ProblemToSubmission\"},{\"name\":\"testCases\",\"kind\":\"object\",\"type\":\"TestCaseResult\",\"relationName\":\"SubmissionToTestCaseResult\"},{\"name\":\"ContestSubmission\",\"kind\":\"object\",\"type\":\"ContestSubmission\",\"relationName\":\"ContestSubmissionToSubmission\"}],\"dbName\":null},\"TestCaseResult\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"submissionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"testCase\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"passed\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"stdout\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expected\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"stderr\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"compileOutput\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"Status\"},{\"name\":\"memory\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"time\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"submission\",\"kind\":\"object\",\"type\":\"Submission\",\"relationName\":\"SubmissionToTestCaseResult\"}],\"dbName\":null},\"ProblemSolved\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"problemId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ProblemSolvedToUser\"},{\"name\":\"problem\",\"kind\":\"object\",\"type\":\"Problem\",\"relationName\":\"ProblemToProblemSolved\"}],\"dbName\":null},\"Playlist\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"visibility\",\"kind\":\"enum\",\"type\":\"PlaylistVisibility\"},{\"name\":\"secretKey\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isAdminPlaylist\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"problems\",\"kind\":\"object\",\"type\":\"ProblemInPlaylist\",\"relationName\":\"PlaylistToProblemInPlaylist\"},{\"name\":\"enrolledPlaylists\",\"kind\":\"object\",\"type\":\"EnrolledPlaylist\",\"relationName\":\"EnrolledPlaylistToPlaylist\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PlaylistToUser\"}],\"dbName\":null},\"ProblemInPlaylist\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"playListId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"problemId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"playlist\",\"kind\":\"object\",\"type\":\"Playlist\",\"relationName\":\"PlaylistToProblemInPlaylist\"},{\"name\":\"problem\",\"kind\":\"object\",\"type\":\"Problem\",\"relationName\":\"ProblemToProblemInPlaylist\"}],\"dbName\":null},\"EnrolledPlaylist\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"originalPlaylistId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"enrolledAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"EnrolledPlaylistToUser\"},{\"name\":\"originalPlaylist\",\"kind\":\"object\",\"type\":\"Playlist\",\"relationName\":\"EnrolledPlaylistToPlaylist\"},{\"name\":\"problems\",\"kind\":\"object\",\"type\":\"ProblemInEnrolledPlaylist\",\"relationName\":\"EnrolledPlaylistToProblemInEnrolledPlaylist\"}],\"dbName\":null},\"ProblemInEnrolledPlaylist\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"enrolledPlaylistId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"problemId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"enrolledPlaylist\",\"kind\":\"object\",\"type\":\"EnrolledPlaylist\",\"relationName\":\"EnrolledPlaylistToProblemInEnrolledPlaylist\"},{\"name\":\"problem\",\"kind\":\"object\",\"type\":\"Problem\",\"relationName\":\"ProblemToProblemInEnrolledPlaylist\"}],\"dbName\":null},\"Discussion\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tags\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"commentsCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"upvotes\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"views\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"DiscussionToUser\"},{\"name\":\"comments\",\"kind\":\"object\",\"type\":\"Comment\",\"relationName\":\"CommentToDiscussion\"},{\"name\":\"DiscussionUpvote\",\"kind\":\"object\",\"type\":\"DiscussionUpvote\",\"relationName\":\"DiscussionToDiscussionUpvote\"}],\"dbName\":null},\"Comment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"discussId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"comment\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"upvote\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"discuss\",\"kind\":\"object\",\"type\":\"Discussion\",\"relationName\":\"CommentToDiscussion\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CommentToUser\"},{\"name\":\"CommentUpvote\",\"kind\":\"object\",\"type\":\"CommentUpvote\",\"relationName\":\"CommentToCommentUpvote\"}],\"dbName\":null},\"CommentUpvote\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CommentUpvoteToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"comment\",\"kind\":\"object\",\"type\":\"Comment\",\"relationName\":\"CommentToCommentUpvote\"},{\"name\":\"commentId\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"DiscussionUpvote\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"discussionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"DiscussionUpvoteToUser\"},{\"name\":\"discussion\",\"kind\":\"object\",\"type\":\"Discussion\",\"relationName\":\"DiscussionToDiscussionUpvote\"}],\"dbName\":null},\"Contest\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"ContestStatus\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"problems\",\"kind\":\"object\",\"type\":\"ContestProblem\",\"relationName\":\"ContestToContestProblem\"},{\"name\":\"contestants\",\"kind\":\"object\",\"type\":\"Contestant\",\"relationName\":\"ContestToContestant\"},{\"name\":\"ContestSubmission\",\"kind\":\"object\",\"type\":\"ContestSubmission\",\"relationName\":\"ContestToContestSubmission\"}],\"dbName\":null},\"Contestant\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"contestId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"score\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"rank\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"joinedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ContestantToUser\"},{\"name\":\"contest\",\"kind\":\"object\",\"type\":\"Contest\",\"relationName\":\"ContestToContestant\"}],\"dbName\":null},\"ContestProblem\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"contestId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"problemId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"points\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"order\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"contest\",\"kind\":\"object\",\"type\":\"Contest\",\"relationName\":\"ContestToContestProblem\"},{\"name\":\"problem\",\"kind\":\"object\",\"type\":\"Problem\",\"relationName\":\"ContestProblemToProblem\"}],\"dbName\":null},\"ContestSubmission\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"contestId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"problemId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"submissionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"score\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"timeTaken\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"contest\",\"kind\":\"object\",\"type\":\"Contest\",\"relationName\":\"ContestToContestSubmission\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ContestSubmissionToUser\"},{\"name\":\"problem\",\"kind\":\"object\",\"type\":\"Problem\",\"relationName\":\"ContestSubmissionToProblem\"},{\"name\":\"submission\",\"kind\":\"object\",\"type\":\"Submission\",\"relationName\":\"ContestSubmissionToSubmission\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

