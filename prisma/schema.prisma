generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum Status {
  ACCEPTED
  WRONG_ANSWER
}

enum VerificationCodeType {
  EMAIL_VERIFICATION
  RESEND_EMAIL_VERIFICATION
  FORGOT_PASSWORD
}

enum PlaylistVisibility {
  PUBLIC
  PRIVATE
}

enum ContestStatus {
  LIVE
  UPCOMING
  ENDED
}

model User {
  id           String   @id @default(cuid())
  googleId     String?  @unique
  email        String   @unique
  username     String
  password     String   @default("")
  role         UserRole @default(USER)
  image        String?
  isVerified   Boolean  @default(false)
  refreshToken String?
  provider     String   @default("local")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  verificationCode VerificationCode[]
  session          Session[]
  problems         Problem[]
  submission       Submission[]
  problemSolved    ProblemSolved[]
  playlists        Playlist[]
  enrolledPlaylists EnrolledPlaylist[]
  Discussion        Discussion[]
  Comment           Comment[]
  DiscussionUpvote  DiscussionUpvote[]
  Contestant        Contestant[]
  ContestSubmission ContestSubmission[]
  CommentUpvote     CommentUpvote[]
}

model VerificationCode {
  id        String               @id @default(uuid())
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  code      String
  type      VerificationCodeType
  expiresAt DateTime
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  @@unique([userId, code])
  @@index([userId])
  @@map("verification_codes")
}

model Session {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  userAgent String?
  ipAddress String?  @db.VarChar(45)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@map("sessions")
}

model Problem {
  id          String     @id @default(uuid())
  title       String
  description String
  difficulty  Difficulty
  tags        String[] // ["tag1", "tag2", "tag3"]
  userId      String
  examples    Json
  constraints String
  hints       String?
  editorial   String?

  testcases          Json
  codeSnippets       Json
  referenceSolutions Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //  Relationship
  user                    User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission              Submission[]
  solvedBy                ProblemSolved[]
  problemInPlaylist       ProblemInPlaylist[]
  problemInEnrolledPlaylist ProblemInEnrolledPlaylist[]
  ContestProblem    ContestProblem[]
  ContestSubmission ContestSubmission[]
}

model Submission {
  id            String  @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        Status
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  testCases TestCaseResult[]
  ContestSubmission ContestSubmission?
}

model TestCaseResult {
  id            String  @id @default(uuid())
  submissionId  String
  testCase      Int
  passed        Boolean
  stdout        String?
  expected      String
  stderr        String?
  compileOutput String?
  status        Status
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //  Relationship
  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model ProblemSolved {
  id        String @id @default(uuid())
  userId    String
  problemId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relationship
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

// Admin created playlists (public/private)
model Playlist {
  id          String             @id @default(uuid())
  name        String
  description String?
  userId      String
  visibility  PlaylistVisibility @default(PUBLIC)
  secretKey   String?            // Only for private playlists
  isAdminPlaylist Boolean        @default(false) // true if created by admin

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problems          ProblemInPlaylist[]
  enrolledPlaylists EnrolledPlaylist[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId])
}

model ProblemInPlaylist {
  id         String   @id @default(uuid())
  playListId String
  problemId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  playlist Playlist @relation(fields: [playListId], references: [id], onDelete: Cascade)
  problem  Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([playListId, problemId])
}

// User enrolled playlists (cloned from admin playlists)
model EnrolledPlaylist {
  id                String   @id @default(uuid())
  userId            String
  originalPlaylistId String   // Reference to the original admin playlist
  name              String
  description       String?
  enrolledAt        DateTime @default(now())

  user             User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  originalPlaylist Playlist                    @relation(fields: [originalPlaylistId], references: [id], onDelete: Cascade)
  problems         ProblemInEnrolledPlaylist[]

  @@unique([userId, originalPlaylistId])
}

model ProblemInEnrolledPlaylist {
  id                 String   @id @default(uuid())
  enrolledPlaylistId String
  problemId          String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  enrolledPlaylist EnrolledPlaylist @relation(fields: [enrolledPlaylistId], references: [id], onDelete: Cascade)
  problem          Problem          @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([enrolledPlaylistId, problemId])
}

model Discussion {
  id            String   @id @default(uuid())
  userId        String
  title         String
  description   String
  tags          String[] @default([])
  commentsCount Int      @default(0)
  upvotes       Int?     @default(0)
  views         Int?     @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments         Comment[]
  DiscussionUpvote DiscussionUpvote[]

  @@unique([userId, title])
}

model Comment {
  id        String   @id @default(uuid())
  discussId String
  userId    String
  comment   String
  upvote    Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  discuss       Discussion      @relation(fields: [discussId], references: [id], onDelete: Cascade)
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  CommentUpvote CommentUpvote[]
}

model CommentUpvote {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String

  @@unique([userId, commentId])
}

model DiscussionUpvote {
  id           String   @id @default(uuid())
  userId       String
  discussionId String
  createdAt    DateTime @default(now())

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  discussion Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)

  @@unique([userId, discussionId])
}

model Contest {
  id          String        @id @default(uuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  status      ContestStatus @default(UPCOMING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  problems          ContestProblem[]
  contestants       Contestant[]
  ContestSubmission ContestSubmission[]

  @@unique([title])
}

model Contestant {
  id        String   @id @default(uuid())
  userId    String
  contestId String
  score     Int      @default(0)
  rank      Int?
  joinedAt  DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  contest Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)

  @@unique([userId, contestId])
}

model ContestProblem {
  id        String @id @default(uuid())
  contestId String
  problemId String
  points    Int    @default(100)
  order     Int    @default(0)

  contest Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([contestId, problemId])
}

model ContestSubmission {
  id           String   @id @default(uuid())
  contestId    String
  userId       String
  problemId    String
  submissionId String   @unique
  score        Int?
  timeTaken    Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  contest    Contest    @relation(fields: [contestId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem    Problem    @relation(fields: [problemId], references: [id], onDelete: Cascade)
  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@unique([userId, contestId, problemId]) // To prevent multiple scoring entries
}
